// The function returns the transparency of the background of the dimmer for the popup window.
function u8 AchievementsPlus.getPopupBackgroundAlpha()
{
	if (global.game_mode == 0x9a || global.game_mode == 0x9b)
		return 0x70
	
	if (global.game_mode == 0x0c)
		return 0x70
	
	// Not transparent by default
	return 255
}

// The function determines what music to play in the menu and when it needs to be restarted.
function void AchievementsPlus.playMenuMusic()
{
	if (SETTING_ACHIEVEPLUS_ORIGINS_MUSIC)
	{
		if (Audio.isPlayingAudio(MUSIC_MENU_ORIGINSTHEME) || !achievementsplus.menuMusic.tempValue0)
		{
			// Do not restart music if already playing
			// -> But make sure it gets played at full volume (in case it's fading out)
			Audio.fadeInChannel(0x00, 0x40)
			return
		}
		
		// Play Origins menu theme
		Audio.playAudio(MUSIC_MENU_ORIGINSTHEME, AudioContext.CONTEXT_MUSIC)
		achievementsplus.menuMusic.tempValue0 = 0x00
	}
	else
	{
		// Play Data Select menu theme
		playMusic(0x2f)
	}
}

function void AchievementsPlus.GameObjectsUpdate()
{
	AchievementsPlus.GameObjectsUpdate_renderOnly()
}

function void AchievementsPlus.GameObjectsUpdate_renderOnly()
{
	A0 = 0xffffb000
	if (competition_mode.active == 0x00 && u8[A0 + 0x05] >= 0x06 && u8[A0 + 0x05] != 0x0c)
	{
		D7 = 0x03
		updateGameObjectLoopRenderOnly()
		
		D7 = 0x59
		updateGameObjectLoopRenderOnly()
		
		D7 = 0x0f
		updateGameObjectLoopRenderOnly()
	}
	else
	{
		D7 = 0x6d
		updateGameObjectLoopRenderOnly()
	}
}

function u8 getCompetitionMatchRaceTime(u8 parse)
{
	// Parse:
	// - COMPETITION_MINUTES - Minutes
	// - COMPETITION_SECONDS - Seconds
	// - COMPETITION_DECIMALS - Decimals
	
	u8 tempValue0 = competition_mode.stage
	
	if (tempValue0 == 0x02)
		tempValue0 = 0x03
	else if (tempValue0 == 0x03)
		tempValue0 = 0x02
	
	u8 tempValue1 = tempValue0 * 0x10
	
	u32 tempValue2 = u32[0xffffe600 + tempValue1 + 0x00]
	
	u8 tempValue3 = tempValue2 / 0x10000
	u8 tempValue4 = u16(tempValue2 / 0x100)
	u8 tempValue5 = u8(tempValue2)
	
	if (parse == COMPETITION_MINUTES)
		return tempValue3
	if (parse == COMPETITION_SECONDS)
		return tempValue4
	if (parse == COMPETITION_DECIMALS)
		return tempValue5
}

function u8 getCompetitionGrandPrixTime(u8 parse)
{
	// Parse:
	// - COMPETITION_MINUTES - Minutes
	// - COMPETITION_SECONDS - Seconds
	// - COMPETITION_DECIMALS - Decimals
	
	u32 tempValue0 = u32[0xffffee98]
	
	u8 tempValue1 = tempValue0 / 0x10000
	u8 tempValue2 = u16(tempValue0 / 0x100)
	u8 tempValue3 = u8(tempValue0)
	
	if (parse == COMPETITION_MINUTES)
		return tempValue1
	if (parse == COMPETITION_SECONDS)
		return tempValue2
	if (parse == COMPETITION_DECIMALS)
		return tempValue3
}

function bool hideAchievementsListItems()
{
	if (achievementsplus.achievements.totalButtons == 0x0000)
		return true
	
	return false
}

function bool sortAchievementsList(u16 achievementID)
{
	string tempValue0 = AchievementsPlus.AchivementsManager.getAchievementDetail(achievementID, 0x00)
	
	if (tempValue0 == "@Hidden" || tempValue0 == "@Secret")
		return false
	
	if (tempValue0 != "")
		return true
	
	return false
}

function bool sortAchievements(u16 achievementID)
{
	string tempValue0 = AchievementsPlus.AchivementsManager.getAchievementDetail(achievementID, 0x00)
	
	if (tempValue0 != "")
		return true
	
	return false
}

// Overload function from Sonic 3: D.A. Garden Edition.
function void loadupCustomMenu()
{
	// Call the base function
	base.loadupCustomMenu()
}

// Overload function from Save Zone Act.
function void SaveZoneAct.SaveIcon.show()
{
	// Call the base function
	if (Mods.isModActive("Save the Second Act of Current Zone"))
		base.SaveZoneAct.SaveIcon.show()
}

function void AchievementsPlus.resetVars()
{
	achievementsplus.going_forward.tempValue0 = 0x00
	achievementsplus.gm_shield_counter.tempValue0 = 0x00
	achievementsplus.deathless_dez.tempValue0 = 0x00
	achievementsplus.right_lbz.tempValue0 = 0x00
	achievementsplus.without_hurt_mgz.tempValue0 = 0x00
}

//@ Original function taken from sonic3air_dev/scripts/standalone/standalone.lemon
function void AchievementsPlus.waitForNextFrame()
{
	AchievementsPlus.BlurManager.update()   
	AchievementsPlus.AchivementsManager.update()
	
	// V-Int
	VInt.InnerUpdate()
	
	// Apply global tint color for screen fades
	Renderer.setGlobalComponentTint(globalComponentTintColorR, globalComponentTintColorG, globalComponentTintColorB, globalComponentAddedColorR, globalComponentAddedColorG, globalComponentAddedColorB)
	
	// Enough for this frame
	yieldExecution()

	// Start of the next frame: Update controllers
	{
		control.pad1.state = Input.getController(0x00)
		control.pad1.pressed = control.pad1.state & ~Input.getControllerPrevious(0x00)
		control.pad2.state = Input.getController(0x01)
		control.pad2.pressed = control.pad2.state & ~Input.getControllerPrevious(0x01)
	}
}

function void AchievementsPlus.Init()
{
	achievementsplus.tempValue1 = Mods.isModActive("Achievements Plus - Tools")
	achievementsplus.tempValue2 = Mods.isModActive("Achievements Plus - Premium")
	
	AchievementsPlus.ManagerVersion.update()
	
	AchievementsPlus.SharedMemory.loadPersistendData()
	AchievementsPlus.AchivementsManager.setToastShowFlag()
	
@EntryPoint:
	AchievementsPlus.resetVars()
	achievementsplus.menuMusic.tempValue0 = 0x00
}